package com.solo.sololand;

import cn.nukkit.Server;
import cn.nukkit.Player;
import cn.nukkit.level.particle.Particle;
import cn.nukkit.level.particle.BubbleParticle;
import cn.nukkit.level.particle.CriticalParticle;
import cn.nukkit.level.particle.SmokeParticle;
import cn.nukkit.level.particle.HeartParticle;
import cn.nukkit.level.particle.LavaParticle;
import cn.nukkit.level.particle.FlameParticle;
import cn.nukkit.math.Vector3;

import com.solo.sololand.world.World;
import com.solo.sololand.land.Land;
import com.solo.sololand.util.Message;

import java.util.HashMap;
import java.util.Random;

public class PlayerMoveThread extends Thread{

  public HashMap<String, int[]> movePos = new HashMap<String, int[]>();

  public PlayerMoveThread(){
  }

  public void run(){
    while(true){
    for(World world : World.getAll().values()){
      for(Player player : world.getLevel().getPlayers().values()){

    String name = player.getName();
 
    int[] pos = new int[4];
    pos[0] = player.getFloorX();
    pos[1] = player.getFloorY();
    pos[2] = player.getFloorZ();

    if(!this.movePos.containsKey(name)){
      pos[3] = 0;
      this.movePos.put(name, pos);
    }else{
      int[] oldPos = this.movePos.get(name);
      if(
        Math.abs(oldPos[0] - pos[0]) < 1 &&
        Math.abs(oldPos[1] - pos[1]) < 1 &&
        Math.abs(oldPos[2] - pos[2]) < 1
      ){
        return;
      }
      Land land = world.getLand(pos[0], pos[2], player.getName());
      if(land != null){
        int num = land.getNumber();
        if(num != oldPos[3]){
          pos[3] = num;

          particleProcess : {
            if(
              !player.isOp() &&
              !land.isMember(name) &&
              !land.isAllowAccess()
            ){
              break particleProcess;
            }
            Particle particle;
            Vector3 vec = new Vector3(pos[0] + 0.5, pos[1]+1, pos[2] + 0.5);
            switch(land.getWelcomeParticle()){
              case Particle.TYPE_BUBBLE:
                particle = new BubbleParticle(vec);
                break;
              case Particle.TYPE_CRITICAL:
                particle = new CriticalParticle(vec);
                break;
              case Particle.TYPE_SMOKE:
                particle = new SmokeParticle(vec);
                break;
              case Particle.TYPE_HEART:
                particle = new HeartParticle(vec);
                break;
              case Particle.TYPE_LAVA:
                particle = new LavaParticle(vec);
                break;
              case Particle.TYPE_FLAME:
                particle = new FlameParticle(vec);
                break;
              case 0:
              default:
                break particleProcess;
            }
            Random random = new Random(System.currentTimeMillis());
            for (int i = 0; i < 10; i++){
              particle.setComponents(
                vec.x + (random.nextFloat() * 2 - 1) * 0.5,
                vec.y + (random.nextFloat() * 2 - 1) * 1,
                vec.z + (random.nextFloat() * 2 - 1) * 0.5
              );
              player.getLevel().addParticle(particle);
            }
          }

          if(land.isOwner(name)){
            Message.tip(player, "[" + Integer.toString(num) + "번 땅] 본인의 땅입니다\n" + land.getWelcomeMessage());
          }else if(land.isOwner("")){ 
            Message.tip(player, "[" + Integer.toString(num) + "번 땅] 주인이 없습니다\n" + land.getWelcomeMessage());
          }else{
            Message.tip(player, "[" + Integer.toString(num) + "번 땅] " + land.getOwner() + "님의 땅입니다\n" + land.getWelcomeMessage());
            Player owner = Server.getInstance().getPlayerExact(land.getOwner());
            if(owner != null){
              Message.tip(owner, "[" + Integer.toString(num) + "번 땅] " + player.getName() + "님이 방문하셨습니다");
            }
          }
          if(land.isSail()){
            Message.popup(player, "현재 " + Double.toString(land.getPrice()) + "원에 판매중입니다");
          } 
        }else{
          pos[3] = oldPos[3];
        }
        if(
          !player.isOp() &&
          !land.isMember(name) &&
          !land.isAllowAccess()
        ){
          Land oldPosLand = world.getLand(oldPos[0], oldPos[2], player.getName());
          if(oldPosLand != null && oldPosLand.getNumber() == oldPos[3]){
            int y = player.getLevel().getHighestBlockAt(land.startX - 1, land.startZ - 1) + 1;
            player.teleport(new Vector3(land.startX - 0.5, y, land.startZ - 0.5));
          }else{
            player.teleport(new Vector3(oldPos[0] + 0.5, oldPos[1], oldPos[2] + 0.5));
          }
          Message.alert(player, "출입이 허용되지 않은 땅입니다");
          return;
        }
      }else if(pos[3] != oldPos[3]){
        Message.popup(player, Integer.toString(oldPos[3]) + "번 땅에서 나갔습니다");
      }
      this.movePos.put(name, pos);
    }


      }
    }
    }
  }


  /*public void sleep(int millis){
    try{
      PlayerMoveThread.sleep(millis);
    }catch(Exception e){
    }
  }*/

}